<?php

namespace StoreBundle\Repository;

/**
 * ReservationsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReservationsRepository extends \Doctrine\ORM\EntityRepository
{
	public function findClientReservationsByClientIdJoinedToClient($id)
	{
	    $query = $this->getEntityManager()
	        ->createQuery(
	            'SELECT r , c as client FROM StoreBundle:Reservations r
	            JOIN StoreBundle:Client c
	            WHERE r.id_client = :id AND c.id = :id'
	        )->setParameter('id', $id);

	    try {
	        return $query->getResult();
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
	}

	public function findClientReservationsByClientAndUserId($userId,$clientId)
	{
	    $query = $this->getEntityManager()
	        ->createQuery(
	            'SELECT r  FROM StoreBundle:Reservations r
	            WHERE r.id_client = :clientId AND r.id_user = :userId ORDER BY r.date_start'
	        )->setParameters(array('clientId' => $clientId, 'userId' => $userId));

	    try {
	        return $query->getResult();
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
	}

	public function findAllByUserIdWithoutDetails($userId)
	{
		$query = $this->getEntityManager()
	        ->createQuery(
	            'SELECT r.id, r.date_start, r.date_end FROM StoreBundle:Reservations r
	            WHERE r.id_user = :userId '
	        )->setParameter('userId', $userId);

	    try {
	        return $query->getResult();
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
	}


	public function findClientDataForReservationId($reservationId,$userId){
		$query = $this->getEntityManager()
	        ->createQuery(
	            'SELECT r.id, r.title as title,r.id_client as idClient ,u.username,u.email FROM StoreBundle:Reservations r INNER JOIN StoreBundle:User u WITH r.id_client = u.id 
	            WHERE r.id_user = :userId AND r.id=:reservationId'
	        )->setParameters(array('userId' => $userId, 'reservationId' => $reservationId));

	    try {
	        return $query->getSingleResult();
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
	}

	public function findAllByUserIdWithDetails($userId)
	{
		$query = $this->getEntityManager()
	        ->createQuery(
	            'SELECT r.id,r.date_start as dateStart,r.date_end as dateEnd,r.title as title,r.id_client as idClient ,u.username,u.email FROM StoreBundle:Reservations r INNER JOIN StoreBundle:User u WITH r.id_client = u.id 
	            WHERE r.id_user = :userId AND r.date_start > CURRENT_DATE() ORDER BY r.date_start '
	        )->setParameter('userId', $userId);

	    try {
	        return $query->getResult();
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
	}

	//TODO : ajouter limite par date : SELECT * FROM `reservations` where month(`date_start`)<=2 and month(`date_end`)>=2
	public function findAllByUserIdWithoutDetailsLessClient($userId,$clientId)
	{
		$query = $this->getEntityManager()
	        ->createQuery(
	            'SELECT r.id, r.date_start as dateStart, r.date_end as dateEnd FROM StoreBundle:Reservations r
	            WHERE r.id_user = :userId AND r.id_client != :clientId ORDER BY r.date_start'
	        )->setParameters(array('clientId' => $clientId, 'userId' => $userId));

	    try {
	        return $query->getResult();
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
	}

	public function findAllByUserIdWithDetailsForClient($userId,$clientId)
	{
		$query = $this->getEntityManager()
	        ->createQuery(
	            'SELECT r.id, r.date_start as dateStart, r.date_end as dateEnd, 
	            CASE WHEN r.id_client = :clientId THEN r.title ELSE \'\' END as title ,
	            CASE WHEN r.id_client = :clientId THEN r.id_client  ELSE \'\' END as idClient 
	           	FROM StoreBundle:Reservations r
	            WHERE r.id_user = :userId AND r.date_start > CURRENT_DATE() ORDER BY r.date_start'
	        )->setParameters(array('clientId' => $clientId, 'userId' => $userId));

	    try {
	        return $query->getResult();
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
	}


	public function findAllByUser($id)
	{
	    $query = $this->getEntityManager()
	        ->createQuery(
	            'SELECT r FROM StoreBundle:Reservations r
	            WHERE r.id_user = :id'
	        )->setParameter('id', $id);

	    try {
	        return $query->getResult();
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
	}

	public function findAllWithoutDetailsByUserId($id)
	{
	    $query = $this->getEntityManager()
	        ->createQuery(
	            'SELECT r.id, r.date_start as dateStart, r.date_end as dateEnd FROM StoreBundle:Reservations r
	            WHERE r.id_user = :id'
	        )->setParameter('id', $id);

	    try {
	        return $query->getResult();
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
	}
	

	public function findAllByClientIdJoinedToClient($id)
	{
	    $query = $this->getEntityManager()
	        ->createQuery(
	            'SELECT r.dateStart,r.dateEnd , c as client FROM StoreBundle:Reservations r
	            left JOIN StoreBundle:Client c
	            WHERE r.id_client = :id AND c.id = :id'
	        )->setParameter('id', $id);

	    try {
	        return $query->getResult();
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        return null;
	    }
	}
}
